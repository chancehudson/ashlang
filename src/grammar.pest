/**
 * This file is organized top to bottom in order
 * of decreasing specificity. Similar types are
 * grouped near each other when possible.
*/

program = _{ SOI ~ "\n"* ~ (fn_header ~ "\n")? ~ "\n"* ~ (stmt ~ "\n"+) * ~ (return_stmt ~ "\n"?)? ~ EOI }

fn_header = { "(" ~ ((varname ~ ("," | ")"))+ | ")") }
stmt = { var_def | const_def | if_stmt | function_call | loop_stmt | var_index_assign | var_vec_def }

expr = { atom ~ (op ~ expr)* }
return_stmt = { "return " ~ (function_call | expr) }

// this is distinct from fn_header because it accepts an expr or a var
fn_args = { "(" ~ (((function_call | expr) ~ ("," | ")"))+ | ")") }
function_call = { varname ~ fn_args }

loop_stmt = { "loop" ~ (function_call | expr) ~ block }

op = _{ add | sub | mul | inv }
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    inv = { "/" }
bool_op = _{ equal | not_equal | gt | lt }
    equal = { "==" }
    not_equal = { "!=" }
    gt = { ">" }
    lt = { "<" }

bool_expr = { expr ~ bool_op ~ expr }
if_stmt = { "if " ~ bool_expr ~ block }
block = { "{" ~ "\n"* ~ (stmt ~ "\n")* ~ "\n"* ~ "}" }

vec = { "[" ~ "\n"* ~ (vec | literal_dec) ~ "\n"* ~ ("\n"* ~ "," ~ "\n"* ~ (vec | literal_dec))* ~ "\n"* ~ "]"}

// this let_r match is needed to
// determine if a variable is being
// declared for the first time
var_def = { var ~ "=" ~ (function_call | expr | vec) }
let_r = { "let " }
const_def = { "const " ~ varname ~ "=" ~ (expr | vec) }
var_vec_def = { let_r ~ var_indexed }
var_index_assign = { var_indexed ~ "=" ~ (function_call | expr ) }

var = { let_r? ~ varname }
var_indexed = { varname ~ ("[" ~ atom ~ "]")+ }

atom = { literal_dec | var_indexed | varname }

literal_dec = @{ ASCII_DIGIT+ }

varname = @{ char+ }

char = _{ ASCII_ALPHANUMERIC | "_" }

WHITESPACE = _{ " " }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
